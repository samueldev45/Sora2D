{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Sora2D Documentation About Sora2D is a pygame based framework for making games easily, made by Samuel Andrade. Alpha Version (Current) ECS System Display Window Asset Manager Keyboard and Mouse Inputs Audio System Scene System Renderer Beta Version Scene Script Tiled maps Support Camera Animation System Light System Physics Particle System 1.0 Version UI System","title":"Home"},{"location":"#welcome-to-sora2d-documentation","text":"","title":"Welcome to Sora2D Documentation"},{"location":"#about","text":"Sora2D is a pygame based framework for making games easily, made by Samuel Andrade.","title":"About"},{"location":"#alpha-version-current","text":"ECS System Display Window Asset Manager Keyboard and Mouse Inputs Audio System Scene System Renderer","title":"Alpha Version (Current)"},{"location":"#beta-version","text":"Scene Script Tiled maps Support Camera Animation System Light System Physics Particle System","title":"Beta Version"},{"location":"#10-version","text":"UI System","title":"1.0 Version"},{"location":"core/","text":"Core core.Actor Variables name : str properties : dict started = bool scene : core.Scene # Transform properties position : math.Vector2 scale : math.Vector2 rotation : int # Sprite properties image : str color : tuple zIndex : int Methods __init__([optional] name : str) # components add(*component : core.Component) get(component : str) -> core.Component remove(component : str) # tag addTag(tag : str) hasTag(tag : str) -> bool removeTag(tag : str) getId() -> int start() update() end() core.AssetManager Variables Methods # image loadImage(name : str, filePath : str) getImage(name : str) -> pygame.Surface deleteImage(name : str) # sound loadSound(name : str, filePath : str) getSound(name : str) -> pygame.mixer.Sound deleteSound(name : str) core.Component Variables name : str args : dict actor : core.Actor Methods __init__(name : str, [optional] args : dict) start() update() core.Scene Variables name : str window : core.Window background : tuple Methods __init__([optional], name : str) # actor add(*actor : core.Actor) remove(actorId : int) get(actorId : int) -> core.Actor get(name : str) -> core.Actor getActors() -> list [core.Actor] start() update() core.Window Variables assets : core.AssetManager fps : 60 pygameEvents : list [pygame.event] mouse : input.Mouse keyboard : input.Keyboard Methods __init__(assets : core.AssetManager) # scene setScene(scene : core.Scene) getScene() -> core.Scene # sound playSound(name : str, volume : float) stopSound(name : str) create(width : int, height : int, title : str, [optional] flags : int) events() update() render() mainLoop()","title":"Core"},{"location":"core/#core","text":"","title":"Core"},{"location":"core/#coreactor","text":"","title":"core.Actor"},{"location":"core/#variables","text":"name : str properties : dict started = bool scene : core.Scene # Transform properties position : math.Vector2 scale : math.Vector2 rotation : int # Sprite properties image : str color : tuple zIndex : int","title":"Variables"},{"location":"core/#methods","text":"__init__([optional] name : str) # components add(*component : core.Component) get(component : str) -> core.Component remove(component : str) # tag addTag(tag : str) hasTag(tag : str) -> bool removeTag(tag : str) getId() -> int start() update() end()","title":"Methods"},{"location":"core/#coreassetmanager","text":"","title":"core.AssetManager"},{"location":"core/#variables_1","text":"","title":"Variables"},{"location":"core/#methods_1","text":"# image loadImage(name : str, filePath : str) getImage(name : str) -> pygame.Surface deleteImage(name : str) # sound loadSound(name : str, filePath : str) getSound(name : str) -> pygame.mixer.Sound deleteSound(name : str)","title":"Methods"},{"location":"core/#corecomponent","text":"","title":"core.Component"},{"location":"core/#variables_2","text":"name : str args : dict actor : core.Actor","title":"Variables"},{"location":"core/#methods_2","text":"__init__(name : str, [optional] args : dict) start() update()","title":"Methods"},{"location":"core/#corescene","text":"","title":"core.Scene"},{"location":"core/#variables_3","text":"name : str window : core.Window background : tuple","title":"Variables"},{"location":"core/#methods_3","text":"__init__([optional], name : str) # actor add(*actor : core.Actor) remove(actorId : int) get(actorId : int) -> core.Actor get(name : str) -> core.Actor getActors() -> list [core.Actor] start() update()","title":"Methods"},{"location":"core/#corewindow","text":"","title":"core.Window"},{"location":"core/#variables_4","text":"assets : core.AssetManager fps : 60 pygameEvents : list [pygame.event] mouse : input.Mouse keyboard : input.Keyboard","title":"Variables"},{"location":"core/#methods_4","text":"__init__(assets : core.AssetManager) # scene setScene(scene : core.Scene) getScene() -> core.Scene # sound playSound(name : str, volume : float) stopSound(name : str) create(width : int, height : int, title : str, [optional] flags : int) events() update() render() mainLoop()","title":"Methods"},{"location":"gettingStarted/","text":"Getting Started Download The Engine You can download the engine with github, you can clone this. git clone https://github.com/samueldev45/Sora2D The engine is a folder called sora, move that to your project folder. that's it, you're ready to use Sora2D :D Create a Window Using Sora2D is easy, we will see how to create a window, copy and paste the code below. from sora.core import * assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") window.mainLoop() Simple no? with that we already have a window ready to render! Asset Manager Asset manager is used to load images and sounds. Example: # load image assets.loadImage(\"box\", \"box.jpg\") # load sound assets.loadSound(\"shot\", \"shot.wav\") WARNING : You can only load images and sounds with the Asset Manager after you have created the window with the create() method. let's implement this in the previous code: from sora.core import * assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") # load image assets.loadImage(\"box\", \"box.png\") # load sound assets.loadSound(\"shot\", \"shot.wav\") window.mainLoop() Actors and Components An Actor is an object in which you decide what you want to create, you can create custom components for it, so that it has a certain logic, you can define an image, position, rotation, scale, among others, let's see: box = Actor() box.image = \"box\" box.position.setValues(100, 100) box.scale.setValues(64, 64) In the code above, we are creating an actor and defining its image, notice that we passed \"box\" to the image of the actor we created, as \"box\" is the identifier name we use to refer to the image that we load in the Asset Manager. Right after that, we define a position and scale for our actor, by default they already come with some predefined value. Components are like add-ons that you can add to your actor, for example you can create a component that allows the actor to move. Lets do this. class Character(Component): def __init__(self, args={}): defaultArgs = { \"Speed\" : 2 } defaultArgs.update(args) super().__init__(\"Character\", defaultArgs) def start(self): self.speed = self.args[\"Speed\"] self.__moveVector = Vector2() def getInputs(self): self.__moveVector.zero() keyboard = self.actor.scene.window.keyboard if keyboard.pressed(\"w\"): self.__moveVector.y = -1 elif keyboard.pressed(\"s\"): self.__moveVector.y = 1 if keyboard.pressed(\"a\"): self.__moveVector.x = -1 elif keyboard.pressed(\"d\"): self.__moveVector.x = 1 if self.__moveVector.length() != 0: self.__moveVector.normalize() self.__moveVector.multiply(self.speed) def update(self): self.getInputs() self.actor.position.add(self.__moveVector) Remembering that this component uses Vector, so we need to import the Vector in the header: from sora.math import * Now we just need to apply the component to our actor: box.add(Character()) Scene If we run our current code, we'll see that it works perfectly, however, nothing appears on the screen, for that we need a Scene, that's where we'll add our actors. Lets do this: scene = Scene() scene.backgroundColor = (50, 150, 255) scene.add(box) In the code above we are creating a scene and setting a background color for it, right after that we add our actor to the scene. If we run our code now, we'll still get a black screen, we've created the scene and added our actor to it, what's left to do? We need to tell the window which scene it should update and draw, let's do this: window.setScene(scene) Now yes! we can see our actor and his motion component works perfectly! Sound We loaded an audio, but we haven't used it yet, let's do that, add this code snippet below at the end of the getInputs method of our component. if keyboard.keyDown(\"space\"): self.actor.scene.window.playSound(\"shot\") That's good, now when we hit the spacebar, our audio will be called! Final Code Here is the final code, if there was an error with your code, check here! from sora.core import * from sora.math import * class Character(Component): def __init__(self, args={}): defaultArgs = { \"Speed\" : 2 } defaultArgs.update(args) super().__init__(\"Character\", defaultArgs) def start(self): self.speed = self.args[\"Speed\"] self.__moveVector = Vector2() def getInputs(self): self.__moveVector.zero() keyboard = self.actor.scene.window.keyboard if keyboard.pressed(\"w\"): self.__moveVector.y = -1 elif keyboard.pressed(\"s\"): self.__moveVector.y = 1 if keyboard.pressed(\"a\"): self.__moveVector.x = -1 elif keyboard.pressed(\"d\"): self.__moveVector.x = 1 if self.__moveVector.length() != 0: self.__moveVector.normalize() self.__moveVector.multiply(self.speed) if keyboard.keyDown(\"space\"): self.actor.scene.window.playSound(\"shot\") def update(self): self.getInputs() self.actor.position.add(self.__moveVector) assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") # load image assets.loadImage(\"box\", \"box.png\") # load sound assets.loadSound(\"shot\", \"shot.wav\") box = Actor() box.image = \"box\" box.position.setValues(100, 100) box.scale.setValues(64, 64) box.add(Character()) scene = Scene() scene.backgroundColor = (50, 150, 255) scene.add(box) window.setScene(scene) window.mainLoop()","title":"Start"},{"location":"gettingStarted/#getting-started","text":"","title":"Getting Started"},{"location":"gettingStarted/#download-the-engine","text":"You can download the engine with github, you can clone this. git clone https://github.com/samueldev45/Sora2D The engine is a folder called sora, move that to your project folder. that's it, you're ready to use Sora2D :D","title":"Download The Engine"},{"location":"gettingStarted/#create-a-window","text":"Using Sora2D is easy, we will see how to create a window, copy and paste the code below. from sora.core import * assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") window.mainLoop() Simple no? with that we already have a window ready to render!","title":"Create a Window"},{"location":"gettingStarted/#asset-manager","text":"Asset manager is used to load images and sounds. Example: # load image assets.loadImage(\"box\", \"box.jpg\") # load sound assets.loadSound(\"shot\", \"shot.wav\") WARNING : You can only load images and sounds with the Asset Manager after you have created the window with the create() method. let's implement this in the previous code: from sora.core import * assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") # load image assets.loadImage(\"box\", \"box.png\") # load sound assets.loadSound(\"shot\", \"shot.wav\") window.mainLoop()","title":"Asset Manager"},{"location":"gettingStarted/#actors-and-components","text":"An Actor is an object in which you decide what you want to create, you can create custom components for it, so that it has a certain logic, you can define an image, position, rotation, scale, among others, let's see: box = Actor() box.image = \"box\" box.position.setValues(100, 100) box.scale.setValues(64, 64) In the code above, we are creating an actor and defining its image, notice that we passed \"box\" to the image of the actor we created, as \"box\" is the identifier name we use to refer to the image that we load in the Asset Manager. Right after that, we define a position and scale for our actor, by default they already come with some predefined value. Components are like add-ons that you can add to your actor, for example you can create a component that allows the actor to move. Lets do this. class Character(Component): def __init__(self, args={}): defaultArgs = { \"Speed\" : 2 } defaultArgs.update(args) super().__init__(\"Character\", defaultArgs) def start(self): self.speed = self.args[\"Speed\"] self.__moveVector = Vector2() def getInputs(self): self.__moveVector.zero() keyboard = self.actor.scene.window.keyboard if keyboard.pressed(\"w\"): self.__moveVector.y = -1 elif keyboard.pressed(\"s\"): self.__moveVector.y = 1 if keyboard.pressed(\"a\"): self.__moveVector.x = -1 elif keyboard.pressed(\"d\"): self.__moveVector.x = 1 if self.__moveVector.length() != 0: self.__moveVector.normalize() self.__moveVector.multiply(self.speed) def update(self): self.getInputs() self.actor.position.add(self.__moveVector) Remembering that this component uses Vector, so we need to import the Vector in the header: from sora.math import * Now we just need to apply the component to our actor: box.add(Character())","title":"Actors and Components"},{"location":"gettingStarted/#scene","text":"If we run our current code, we'll see that it works perfectly, however, nothing appears on the screen, for that we need a Scene, that's where we'll add our actors. Lets do this: scene = Scene() scene.backgroundColor = (50, 150, 255) scene.add(box) In the code above we are creating a scene and setting a background color for it, right after that we add our actor to the scene. If we run our code now, we'll still get a black screen, we've created the scene and added our actor to it, what's left to do? We need to tell the window which scene it should update and draw, let's do this: window.setScene(scene) Now yes! we can see our actor and his motion component works perfectly!","title":"Scene"},{"location":"gettingStarted/#sound","text":"We loaded an audio, but we haven't used it yet, let's do that, add this code snippet below at the end of the getInputs method of our component. if keyboard.keyDown(\"space\"): self.actor.scene.window.playSound(\"shot\") That's good, now when we hit the spacebar, our audio will be called!","title":"Sound"},{"location":"gettingStarted/#final-code","text":"Here is the final code, if there was an error with your code, check here! from sora.core import * from sora.math import * class Character(Component): def __init__(self, args={}): defaultArgs = { \"Speed\" : 2 } defaultArgs.update(args) super().__init__(\"Character\", defaultArgs) def start(self): self.speed = self.args[\"Speed\"] self.__moveVector = Vector2() def getInputs(self): self.__moveVector.zero() keyboard = self.actor.scene.window.keyboard if keyboard.pressed(\"w\"): self.__moveVector.y = -1 elif keyboard.pressed(\"s\"): self.__moveVector.y = 1 if keyboard.pressed(\"a\"): self.__moveVector.x = -1 elif keyboard.pressed(\"d\"): self.__moveVector.x = 1 if self.__moveVector.length() != 0: self.__moveVector.normalize() self.__moveVector.multiply(self.speed) if keyboard.keyDown(\"space\"): self.actor.scene.window.playSound(\"shot\") def update(self): self.getInputs() self.actor.position.add(self.__moveVector) assets = AssetManager() window = Window(assets) window.create(800, 600, \"First Window\") # load image assets.loadImage(\"box\", \"box.png\") # load sound assets.loadSound(\"shot\", \"shot.wav\") box = Actor() box.image = \"box\" box.position.setValues(100, 100) box.scale.setValues(64, 64) box.add(Character()) scene = Scene() scene.backgroundColor = (50, 150, 255) scene.add(box) window.setScene(scene) window.mainLoop()","title":"Final Code"},{"location":"input/","text":"Input input.Keyboard Variables Methods pressed(key : str) keyDown(key : str) update() input.Mouse Variables Methods getPosition() -> math.Vector2 pressed(button : int) click(button : int) update()","title":"Input"},{"location":"input/#input","text":"","title":"Input"},{"location":"input/#inputkeyboard","text":"","title":"input.Keyboard"},{"location":"input/#variables","text":"","title":"Variables"},{"location":"input/#methods","text":"pressed(key : str) keyDown(key : str) update()","title":"Methods"},{"location":"input/#inputmouse","text":"","title":"input.Mouse"},{"location":"input/#variables_1","text":"","title":"Variables"},{"location":"input/#methods_1","text":"getPosition() -> math.Vector2 pressed(button : int) click(button : int) update()","title":"Methods"},{"location":"math/","text":"Math math.Vector2 Variables x : float y : float Methods __init__([optinal] x : float, y : float) add(vector2 : math.Vector2) subtract(vector2 : math.Vector2) multiply(scalar : float) divide(scalar : float) setValues(x : float, y : float) length() -> float lengthSquared() -> float normalize() isNormalized() -> bool dot(vector2 : math.Vector2) -> float cross(vector2 : math.Vector2) -> float lerp(vector2 : math.Vector2, value : float) -> math.Vector2 rotate(degrees : int) rotateRad(radians : int) copy() -> math.Vector2 zero()","title":"Math"},{"location":"math/#math","text":"","title":"Math"},{"location":"math/#mathvector2","text":"","title":"math.Vector2"},{"location":"math/#variables","text":"x : float y : float","title":"Variables"},{"location":"math/#methods","text":"__init__([optinal] x : float, y : float) add(vector2 : math.Vector2) subtract(vector2 : math.Vector2) multiply(scalar : float) divide(scalar : float) setValues(x : float, y : float) length() -> float lengthSquared() -> float normalize() isNormalized() -> bool dot(vector2 : math.Vector2) -> float cross(vector2 : math.Vector2) -> float lerp(vector2 : math.Vector2, value : float) -> math.Vector2 rotate(degrees : int) rotateRad(radians : int) copy() -> math.Vector2 zero()","title":"Methods"},{"location":"renderer/","text":"Renderer renderer.Renderer Variables Methods render()","title":"Renderer"},{"location":"renderer/#renderer","text":"","title":"Renderer"},{"location":"renderer/#rendererrenderer","text":"","title":"renderer.Renderer"},{"location":"renderer/#variables","text":"","title":"Variables"},{"location":"renderer/#methods","text":"render()","title":"Methods"}]}